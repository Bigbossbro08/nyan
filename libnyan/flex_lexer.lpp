%{
// Copyright 2016-2017 the nyan authors, LGPLv3+. See copying.md for legal info.

/**
 * @file
 * nyan language lexer
 */

#include <cstdio>
#include <cstdlib>
#include <string>
#include <tuple>
#include <vector>

#ifndef NYAN_LEXER_FUCK_YOU_FLEX
#define NYAN_LEXER_FUCK_YOU_FLEX 1
#endif

#include "lexer.h"
#include "token.h"

using namespace std::string_literals;

// Go fuck yourself flex.
// Why can't I change the method signature in a better
// way when generating the c++ member function?
// Customizing the type signature works in C, but you forgot
// to update the C++ class member...
// %option yyclass="NyanFlexLexer" will fuck it up even more.
#define YY_DECL void nyan::NyanLexer::generate_token()

#ifndef NyanHEADER_H
int NyanFlexLexer::yylex() { return 0; }
#endif

// before matching a rule, advance the line position
#define YY_USER_ACTION this->advance_linepos();

%}


%option c++
%option prefix="Nyan"
%option warn nodefault
%option yylineno
%option nounistd
%option never-interactive


digit          [0-9]
id             [A-Za-z_][A-Za-z0-9_]*
punct          [-+*/|%&@]
assignpunct    {punct}=
int            (-|0[xX])?{digit}+
float          -?{digit}+\.{digit}*

%%

"#"[^\n]*\n       { /* ignore comments */ this->reset_linepos(); }

"\t"              { throw this->error("tab character"); }

^[ ]*\n           { /* ignore blank lines. */ this->reset_linepos(); }

^[ ]*[^ \n]+      { /* indent */
    int last = this->yyleng - 1;
    this->handle_indent(this->yytext);

    // walk from right to left until the indent begin is found
    while ((last >= 0) && (this->yytext[last] != ' ')) {
        unput(this->yytext[last]);
        last--;
        this->linepos--;
    }
}

\"(\\.|[^\\"])*\"       { this->token(nyan::token_type::STRING); return; }
\'(\\.|[^\\'])*\'       { this->token(nyan::token_type::STRING); return; }

"\n"                    { this->token(nyan::token_type::ENDLINE);
                          this->reset_linepos(); return; }

"("                     { this->token(nyan::token_type::LPAREN); return; }
")"                     { this->token(nyan::token_type::RPAREN); return; }
"<"                     { this->token(nyan::token_type::LANGLE); return; }
">"                     { this->token(nyan::token_type::RANGLE); return; }
"["                     { this->token(nyan::token_type::LBRACKET); return; }
"]"                     { this->token(nyan::token_type::RBRACKET); return; }
"{"                     { this->token(nyan::token_type::LBRACE); return; }
"}"                     { this->token(nyan::token_type::RBRACE); return; }

"pass"                  { this->token(nyan::token_type::PASS); return; }
"import"                { this->token(nyan::token_type::IMPORT); return; }
"from"                  { this->token(nyan::token_type::FROM); return; }
"as"                    { this->token(nyan::token_type::FROM); return; }
{punct}|{assignpunct}|[=] { this->token(nyan::token_type::OPERATOR); return; }
{int}                   { this->token(nyan::token_type::INT); return; }
{float}                 { this->token(nyan::token_type::FLOAT); return; }
{id}                    { this->token(nyan::token_type::ID); return; }
":"                     { this->token(nyan::token_type::COLON); return; }
","                     { this->token(nyan::token_type::COMMA); return; }

[ \r]                   { /* ignore space */ }
"\f"                    { yylineno -= 1; }

<<EOF>>                 { this->token(nyan::token_type::ENDFILE); return; }

.                       { throw this->error("invalid char: "s + yytext); }

%%


// No file wrapper needed for now.
// And of course the noyywrap option is broken and generates
// this snippet in both the header and cpp file.
int yyFlexLexer::yywrap() {
	return 1;
}
