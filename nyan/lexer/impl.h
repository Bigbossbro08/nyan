// Copyright 2017-2017 the nyan authors, LGPLv3+. See copying.md for legal info.
#pragma once

#ifndef yyFlexLexer
#define YY_NO_UNISTD_H
#include "flex.gen.h"
#endif

#include "lexer.h"

namespace nyan::lexer {


/// Extend the lexer class generated by Flex
class Impl : yyFlexLexer {
	friend yyFlexLexer;
public:

	explicit Impl(Lexer *outer);

	/**
	 * Produce a token by reading the input.
	 * Place the token in the owner's queue.
	 */
	void generate_token() {
		this->yylex();
	}

	/**
	 * Create a token with correct text position and value.
	 * Add the token to the owner's queue.
	 */
	void token(token_type type);

	/** Tokenize error was encountered. */
	TokenizeError error(const std::string &msg);

protected:

	/** Emit line ending token for current position. */
	void endline();

	/** Forward to `this->owner`. */
	void handle_indent(const char *line) {
		this->owner->handle_indent(line);
	}

	/** Reset the line position to the beginning. */
	void reset_linepos();

	/** The default line positon at the very beginning of one line. */
	static constexpr int linepos_start = 0;

	/** *non-owning* pointer to the owning Lexer object */
	Lexer *owner;

	/** Current position in a line. */
	int linepos = linepos_start;
};

} // namespace nyan::lexer
